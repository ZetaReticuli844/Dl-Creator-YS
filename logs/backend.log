Java HotSpot(TM) 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
[otel.javaagent 2025-08-29 04:03:53:517 +0530] [main] INFO io.opentelemetry.javaagent.tooling.VersionLogger - opentelemetry-javaagent - version: 2.19.0
WARNING: A terminally deprecated method in sun.misc.Unsafe has been called
WARNING: sun.misc.Unsafe::objectFieldOffset has been called by net.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$CreationAction (file:/Users/yogeshshekhawat/assignment/backend/dl_creator/opentelemetry-javaagent.jar)
WARNING: Please consider reporting this to the maintainers of class net.bytebuddy.dynamic.loading.ClassInjector$UsingUnsafe$Dispatcher$CreationAction
WARNING: sun.misc.Unsafe::objectFieldOffset will be removed in a future release

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.4)

2025-08-29T04:03:55.565+05:30  INFO 80102 --- [dl_creator] [           main] c.dlyog.dl_creator.DlCreatorApplication  : Starting DlCreatorApplication v0.0.1-SNAPSHOT using Java 24.0.1 with PID 80102 (/Users/yogeshshekhawat/assignment/backend/dl_creator/target/dl_creator-0.0.1-SNAPSHOT.jar started by yogeshshekhawat in /Users/yogeshshekhawat/assignment/backend/dl_creator)
2025-08-29T04:03:55.575+05:30  INFO 80102 --- [dl_creator] [           main] c.dlyog.dl_creator.DlCreatorApplication  : No active profile set, falling back to 1 default profile: "default"
2025-08-29T04:03:56.201+05:30  INFO 80102 --- [dl_creator] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[otel.javaagent 2025-08-29 04:03:56:239 +0530] [OkHttp http://localhost:4317/...] ERROR io.opentelemetry.exporter.internal.grpc.GrpcExporter - Failed to export logs. Server responded with UNIMPLEMENTED. This usually means that your collector is not configured with an otlp receiver in the "pipelines" section of the configuration. If export is not desired and you are using OpenTelemetry autoconfiguration or the javaagent, disable export by setting OTEL_LOGS_EXPORTER=none. Full error message: unknown service opentelemetry.proto.collector.logs.v1.LogsService
2025-08-29T04:03:56.250+05:30  INFO 80102 --- [dl_creator] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 35 ms. Found 3 JPA repository interfaces.
2025-08-29T04:03:56.765+05:30  INFO 80102 --- [dl_creator] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 7500 (http)
2025-08-29T04:03:56.782+05:30  INFO 80102 --- [dl_creator] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-08-29T04:03:56.782+05:30  INFO 80102 --- [dl_creator] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.43]
2025-08-29T04:03:56.831+05:30  INFO 80102 --- [dl_creator] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-08-29T04:03:56.831+05:30  INFO 80102 --- [dl_creator] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1212 ms
2025-08-29T04:03:57.026+05:30  INFO 80102 --- [dl_creator] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-08-29T04:03:57.104+05:30  INFO 80102 --- [dl_creator] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.22.Final
2025-08-29T04:03:57.135+05:30  INFO 80102 --- [dl_creator] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-08-29T04:03:57.463+05:30  INFO 80102 --- [dl_creator] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-08-29T04:03:57.491+05:30  INFO 80102 --- [dl_creator] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-08-29T04:03:57.673+05:30  INFO 80102 --- [dl_creator] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:dl_creator_db user=SA
2025-08-29T04:03:57.687+05:30  INFO 80102 --- [dl_creator] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-08-29T04:03:57.715+05:30  WARN 80102 --- [dl_creator] [           main] org.hibernate.orm.deprecation            : HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-08-29T04:03:57.736+05:30  INFO 80102 --- [dl_creator] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 2.3.232
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
Hibernate: 
    create global temporary table HTE_driving_license(rn_ integer not null, user_id integer, expiration_date timestamp(6), id bigint, issue_date timestamp(6), address varchar(255), first_name varchar(255), last_name varchar(255), license_number varchar(255), vehicle_make varchar(255), vehicle_type varchar(255), license_status enum ('CANCELLED', 'DELIVERED', 'DISPATCHED', 'PENDING', 'PRINTED', 'SUBMITTED'), primary key (rn_)) TRANSACTIONAL
Hibernate: 
    create global temporary table HTE_users(id integer, rn_ integer not null, created_at timestamp(6), updated_at timestamp(6), email varchar(100), full_name varchar(255), password varchar(255), primary key (rn_)) TRANSACTIONAL
2025-08-29T04:03:58.787+05:30  INFO 80102 --- [dl_creator] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists driving_license cascade 
Hibernate: 
    drop table if exists users cascade 
Hibernate: 
    drop sequence if exists driving_license_seq
Hibernate: 
    drop sequence if exists users_seq
Hibernate: 
    create sequence driving_license_seq start with 1 increment by 50
Hibernate: 
    create sequence users_seq start with 1 increment by 50
Hibernate: 
    create table driving_license (
        user_id integer not null unique,
        expiration_date timestamp(6) not null,
        id bigint not null,
        issue_date timestamp(6) not null,
        address varchar(255) not null,
        first_name varchar(255) not null,
        last_name varchar(255) not null,
        license_number varchar(255) not null unique,
        vehicle_make varchar(255),
        vehicle_type varchar(255) not null,
        license_status enum ('CANCELLED','DELIVERED','DISPATCHED','PENDING','PRINTED','SUBMITTED') not null,
        primary key (id)
    )
Hibernate: 
    create table users (
        id integer not null,
        created_at timestamp(6),
        updated_at timestamp(6),
        email varchar(100) not null unique,
        full_name varchar(255) not null,
        password varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    alter table if exists driving_license 
       add constraint FK6ut1gms63k4lxxx37taccntf7 
       foreign key (user_id) 
       references users
2025-08-29T04:03:58.830+05:30  INFO 80102 --- [dl_creator] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-08-29T04:03:59.339+05:30  INFO 80102 --- [dl_creator] [           main] eAuthenticationProviderManagerConfigurer : Global AuthenticationManager configured with AuthenticationProvider bean with name authenticationProvider
2025-08-29T04:03:59.339+05:30  WARN 80102 --- [dl_creator] [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with an AuthenticationProvider bean. UserDetailsService beans will not be used by Spring Security for automatically configuring username/password login. Consider removing the AuthenticationProvider bean. Alternatively, consider using the UserDetailsService in a manually instantiated DaoAuthenticationProvider. If the current configuration is intentional, to turn off this warning, increase the logging level of 'org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer' to ERROR
[otel.javaagent 2025-08-29 04:03:59:662 +0530] [main] WARN io.opentelemetry.api.GlobalOpenTelemetry - You are currently using the OpenTelemetry Instrumentation Java Agent; all GlobalOpenTelemetry.set calls are ignored - the agent provides the global OpenTelemetry object used by your application.
java.lang.Throwable
	at io.opentelemetry.api.GlobalOpenTelemetry.set(GlobalOpenTelemetry.java:105)
	at io.opentelemetry.sdk.OpenTelemetrySdkBuilder.buildAndRegisterGlobal(OpenTelemetrySdkBuilder.java:85)
	at com.dlyog.dl_creator.config.OpenTelemetryConfig.openTelemetry(OpenTelemetryConfig.java:29)
	at com.dlyog.dl_creator.config.OpenTelemetryConfig$$SpringCGLIB$$0.CGLIB$openTelemetry$1(<generated>)
	at com.dlyog.dl_creator.config.OpenTelemetryConfig$$SpringCGLIB$$FastClass$$1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:258)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:400)
	at com.dlyog.dl_creator.config.OpenTelemetryConfig$$SpringCGLIB$$0.openTelemetry(<generated>)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.lambda$instantiate$0(SimpleInstantiationStrategy.java:172)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiateWithFactoryMethod(SimpleInstantiationStrategy.java:89)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:169)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:489)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1683)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1628)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:913)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:546)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1375)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1205)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1683)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1628)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:913)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:240)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1395)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1232)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:569)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:529)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:339)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:373)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1222)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1188)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1123)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1361)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1350)
	at com.dlyog.dl_creator.DlCreatorApplication.main(DlCreatorApplication.java:10)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
	at java.base/java.lang.reflect.Method.invoke(Method.java:565)
	at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:102)
	at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:64)
	at org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:40)
2025-08-29T04:03:59.694+05:30  INFO 80102 --- [dl_creator] [           main] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2025-08-29T04:04:00.667+05:30  INFO 80102 --- [dl_creator] [           main] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:dl_creator_db'
2025-08-29T04:04:00.957+05:30  INFO 80102 --- [dl_creator] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 7500 (http) with context path '/'
2025-08-29T04:04:00.972+05:30  INFO 80102 --- [dl_creator] [           main] c.dlyog.dl_creator.DlCreatorApplication  : Started DlCreatorApplication in 5.722 seconds (process running for 7.626)
2025-08-29T04:04:05.413+05:30  INFO 80102 --- [dl_creator] [nio-7500-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-08-29T04:04:05.414+05:30  INFO 80102 --- [dl_creator] [nio-7500-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-08-29T04:04:05.421+05:30  INFO 80102 --- [dl_creator] [nio-7500-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 6 ms
[otel.javaagent 2025-08-29 04:04:54:134 +0530] [OkHttp http://localhost:4317/...] ERROR io.opentelemetry.exporter.internal.grpc.GrpcExporter - Failed to export metrics. Server responded with UNIMPLEMENTED. This usually means that your collector is not configured with an otlp receiver in the "pipelines" section of the configuration. If export is not desired and you are using OpenTelemetry autoconfiguration or the javaagent, disable export by setting OTEL_METRICS_EXPORTER=none. Full error message: unknown service opentelemetry.proto.collector.metrics.v1.MetricsService
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        next value for users_seq
Hibernate: 
    insert 
    into
        users
        (created_at, email, full_name, password, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        next value for driving_license_seq
Hibernate: 
    insert 
    into
        driving_license
        (address, expiration_date, first_name, issue_date, last_name, license_number, license_status, user_id, vehicle_make, vehicle_type, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        dl1_0.id,
        dl1_0.address,
        dl1_0.expiration_date,
        dl1_0.first_name,
        dl1_0.issue_date,
        dl1_0.last_name,
        dl1_0.license_number,
        dl1_0.license_status,
        dl1_0.user_id,
        dl1_0.vehicle_make,
        dl1_0.vehicle_type 
    from
        driving_license dl1_0 
    where
        dl1_0.user_id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.full_name,
        u1_0.password,
        u1_0.updated_at 
    from
        users u1_0 
    where
        u1_0.id=?
